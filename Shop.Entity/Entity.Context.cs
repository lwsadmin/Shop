//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shop.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbContext : DbContext
    {
        public dbContext()
            : base("name=dbContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TArticle> TArticle { get; set; }
        public virtual DbSet<TLog> TLog { get; set; }
        public virtual DbSet<TManager> TManager { get; set; }
        public virtual DbSet<TImage> TImage { get; set; }
        public virtual DbSet<TOperator> TOperator { get; set; }
        public virtual DbSet<TMemberCategory> TMemberCategory { get; set; }
        public virtual DbSet<TManagerRole> TManagerRole { get; set; }
        public virtual DbSet<TCoupon> TCoupon { get; set; }
        public virtual DbSet<TBusinessCoupon> TBusinessCoupon { get; set; }
        public virtual DbSet<TCouponPackage> TCouponPackage { get; set; }
        public virtual DbSet<TCouponPackageItem> TCouponPackageItem { get; set; }
        public virtual DbSet<TGift> TGift { get; set; }
        public virtual DbSet<TParameter> TParameter { get; set; }
        public virtual DbSet<TChainStorePointNote> TChainStorePointNote { get; set; }
        public virtual DbSet<TAnnouncement> TAnnouncement { get; set; }
        public virtual DbSet<TAnnouncementReader> TAnnouncementReader { get; set; }
        public virtual DbSet<TChainStoreValueNote> TChainStoreValueNote { get; set; }
        public virtual DbSet<TChainStoreSettleSet> TChainStoreSettleSet { get; set; }
        public virtual DbSet<TMemberValueNote> TMemberValueNote { get; set; }
        public virtual DbSet<TChainStoreSmsSendNote> TChainStoreSmsSendNote { get; set; }
        public virtual DbSet<TMemberCoupon> TMemberCoupon { get; set; }
        public virtual DbSet<TGiftExchangeNote> TGiftExchangeNote { get; set; }
        public virtual DbSet<TGiftExchangeNoteItem> TGiftExchangeNoteItem { get; set; }
        public virtual DbSet<TMemberConsumeNote> TMemberConsumeNote { get; set; }
        public virtual DbSet<TMemberPointNote> TMemberPointNote { get; set; }
        public virtual DbSet<TChainStoreCapitalNote> TChainStoreCapitalNote { get; set; }
        public virtual DbSet<TChainStoreBuySmsNote> TChainStoreBuySmsNote { get; set; }
        public virtual DbSet<TChainStore> TChainStore { get; set; }
        public virtual DbSet<TIndustry> TIndustry { get; set; }
        public virtual DbSet<TBusiness> TBusiness { get; set; }
        public virtual DbSet<TBrand> TBrand { get; set; }
        public virtual DbSet<TGoodsCategory> TGoodsCategory { get; set; }
        public virtual DbSet<TArticleCategory> TArticleCategory { get; set; }
        public virtual DbSet<TActivity> TActivity { get; set; }
        public virtual DbSet<TActivityCategory> TActivityCategory { get; set; }
        public virtual DbSet<TGoods> TGoods { get; set; }
        public virtual DbSet<TMember> TMember { get; set; }
        public virtual DbSet<TGiftCategory> TGiftCategory { get; set; }
        public virtual DbSet<TComment> TComment { get; set; }
        public virtual DbSet<TRushBuy> TRushBuy { get; set; }
        public virtual DbSet<TGoodsProperty> TGoodsProperty { get; set; }
        public virtual DbSet<TRushBuyOrder> TRushBuyOrder { get; set; }
        public virtual DbSet<TRushOrderItem> TRushOrderItem { get; set; }
    
        public virtual int GetPaged(Nullable<int> pageIndex, Nullable<int> pageSize, string table, string field, string orderBy, string where, ObjectParameter totalCount, ObjectParameter descript)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var tableParameter = table != null ?
                new ObjectParameter("Table", table) :
                new ObjectParameter("Table", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var orderByParameter = orderBy != null ?
                new ObjectParameter("OrderBy", orderBy) :
                new ObjectParameter("OrderBy", typeof(string));
    
            var whereParameter = where != null ?
                new ObjectParameter("Where", where) :
                new ObjectParameter("Where", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPaged", pageIndexParameter, pageSizeParameter, tableParameter, fieldParameter, orderByParameter, whereParameter, totalCount, descript);
        }
    
        public virtual ObjectResult<usp_GoodsCategory> usp_SelectGoodsCategory(string operatorGuid, string businessGuid, Nullable<int> type)
        {
            var operatorGuidParameter = operatorGuid != null ?
                new ObjectParameter("OperatorGuid", operatorGuid) :
                new ObjectParameter("OperatorGuid", typeof(string));
    
            var businessGuidParameter = businessGuid != null ?
                new ObjectParameter("BusinessGuid", businessGuid) :
                new ObjectParameter("BusinessGuid", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GoodsCategory>("usp_SelectGoodsCategory", operatorGuidParameter, businessGuidParameter, typeParameter);
        }
    }
}
